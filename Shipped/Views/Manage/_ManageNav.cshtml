@using login2.Views.Manage
@inject SignInManager<ApplicationUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}

<ul class="nav nav-pills nav-stacked">
    <li class="@ManageNavPages.IndexNavClass(ViewContext)"><a asp-action="Index">Profile</a></li>
    <li class="@ManageNavPages.ChangePasswordNavClass(ViewContext)"><a asp-action="ChangePassword">Password</a></li>
    @if (hasExternalLogins)
    {
        <li class="@ManageNavPages.ExternalLoginsNavClass(ViewContext)"><a asp-action="ExternalLogins">External logins</a></li>
    }
    <li><a asp-area="" asp-controller="Home" asp-action="OrderHistory" class="navbar-brand">OrderHistory</a></li>
    @if (this.User.IsInRole("Admin")) {
        <li><a asp-area="" asp-controller="Parser" asp-action="Index" class="navbar-brand">Upload bestanden</a></li>
        <li><a asp-area="" asp-controller="User" asp-action="Index" class="navbar-brand">Users</a></li>
    }

    @if (!this.User.IsInRole("Admin")) {
    <li><a asp-area="" asp-controller="Wishlist" asp-action="Index" class="navbar-brand">Wish list</a></li>    
        <li><a asp-area="" asp-controller="Home" asp-action="Cart" class="navbar-brand">Shopping cart</a></li>
    }
</ul>

